Schedule of CIS 505
Project3
Yilun Fu, Miao Cheng, Yi-ping Lin

Schedule:
Week1:(03/25)
Read the spec of project3, make a plan of what to do next
Make a github private repository

Week2:(04/1)
Data Structure Design
Implement the basic functions I (Infrastructure and Multicast, etc.)

Week3:(04/8)
Implement the basic functions II (Sequencer election, etc.)

Week4:(04/15)
Implement the basic functions III (Remaining Part)
Extra Credit Part I

Week5:(04/22)
Extra Credit Part II

Work Distribution:
Yilun Fu: Multicast protocol and Message design

Miao Cheng: Basic infrastructure and Server design

Yi-ping Lin: Multicast protocol and Ordered protocol

All: Sequencer election

Detailed Design Specification:
Shared Functions:
Deserial Function
Encoding & Decoding Function

Message Types: String
Data Structure of msg:
Struct msg {
   int clientID;
   int entering_order;
   int ip;
   int port;
   string message;
}

Every time a client wants to send a message, we’ll serialize the message struct to be a string by separating each item by “#” and 
replace the original “#” with “/#”, “/” with “//”. And then when a client receives a message, we’ll deserialize it to the msg struct.

Time when these information are used:
Message (This is sent when client sends a message)
Active Clients ids and their addresses & entering orders (for choosing the next leader, this is sent when a client joins a group)
Vector Time (for ordering usage, this is sent every time a client does something)

Protocol states: 
We’re asked to use UDP as protocol. And as described in project description. UDP is very unreliable, so we decide to take one 
client as the leader/sequencer of the group and keep monitoring the state of other clients at that time. 
So each time if a client is crashed or inactive, the leader will detect it and eliminate it from the chat. 
Also we need to consider the situation when the leader is crashed, Then we need to design an election algorithm for next leader, 
here we want to pass the leader according to the entering time of each client. The one who enters first will be the next leader.

Data structure we’re using:
Ordered map: key is enter ordering and value is the corresponding client and his information.
This is for election.

Modules:
Server: main module, deal with the main logic (Miao Cheng and Yilun Fu)
Election: deal with election when the leader crashes (Yilun Fu, Miao Cheng, and Yi-Ping Lin)
Message: the struct which is sent via clients (Yilun Fu and Yi-Ping Lin)
Utility: for some utility functions (Yilun Fu and Miao Cheng)

Message:
normal_message: when client sends a normal message. command#$time_stamp#$user_name#$message (command is normal)
client_join_request: when client sends a join request to leader/other client. command#$time_stamp#$user_name#$my_ip:my_port (command is join_request)
client_join_form: when leader receives a join request, multicast the join_form to current client. command#$time_stamp#$username#$client_ip:client_port (command is join_form)
client_join_response: when leader receives a join request, send the msg back to the client who's joinning. command#$time_stamp#$leader_ip:leader_port#$first_member_ip:first_member_port#$first_member_name#$...(command is join_response)
client_heartbeat: client would send his heartbeat to leader every fixed seconds. command#$time_stamp#$my_ip:my_port (command is client_heartbeat)
leader_heartbeat: leader would multicast his heartbeat to every client every fixed seconds. command#$time_stamp(command is leader_heartbeat)
client_leave: when leader detect a client leaves or crashes, he would send a leave message to every client. command#$time_stamp#$client_leave_ip:client_leave_port (command is client_leave)
election: when client detect leader leaves or crashses, he would send a election message to all clients that have higher ip:port than himself. command#$time_stamp#$ (command is election)
new_leader_create: when a new leader is elected, we would multicast the msg to every client. command#$time_stamp#$leader_name#$leader_ip:leader_port. (command is new_leader)

